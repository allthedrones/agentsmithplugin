<?xml version="1.0" encoding="utf-8" ?>
<NamingConventionSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <Rules>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>EnumerationMember</Declaration>
                    <MarkedWithAttribute />
                </Match>
            </Matches>
            <NotMatches />
            <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Property</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Event</Declaration>
                    <MarkedWithAttribute />
                </Match>
            </Matches>
            <NotMatches />
            <Description>Non private properties, methods, events should be in pascal.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Property</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Event</Declaration>
                    <MarkedWithAttribute />
                </Match>
            </Matches>
            <NotMatches />
            <Description>Private properties, methods, events should be in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Field</Declaration>
                    <MarkedWithAttribute />
                </Match>
            </Matches>
            <NotMatches />
            <Description>Fields should be underscore camel.</Description>
            <MustHavePrefixes>
                <string>_</string>              
            </MustHavePrefixes>                
            <MustNotHavePrefixes>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Variable</Declaration>
                </Match>
            </Matches>
            <Description>Variable should be declared in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>            
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Parameter</Declaration>
                </Match>
            </Matches>
            <Description>Function parameters should be in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Namespace</Declaration>
                </Match>
            </Matches>
            <Description>Namespaces should be in Pascal.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                </Match>
            </Matches>
            <Description>Constants should be in capital.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>UpperCase</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Any</Declaration>
                </Match>
            </Matches>
            <NotMatches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                </Match>
            </NotMatches>
            <Description>Acronyms should not have more than 2 characters.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>MatchesRegex</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
            <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Any</Declaration>
                </Match>
            </Matches>
            <NotMatches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Field</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                </Match>
                <Match>
                    <AccessLevel>None</AccessLevel>
                    <Declaration>Namespace</Declaration>
                </Match>
            </NotMatches>
            <Description>Names should not have underscore character</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>NotMatchesRegex</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
            <Regex>(?&lt;remove&gt;_)</Regex>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                </Match>
            </Matches>
            <Description>TestFixtures should end with Test.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
                <string>Test</string>
            </MustNotHavePrefixes>
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Test</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                </Match>
            </Matches>
            <Description>Test methods should start with Test.</Description>
            <MustHavePrefixes>
                <string>Test</string>
            </MustHavePrefixes>
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes>
                <string>Test</string>
            </MustNotHaveSuffixes>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                </Match>
            </Matches>
            <Description>Enumerations should not end with Enum.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes>
                <string>Enum</string>
            </MustNotHaveSuffixes>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>EnumerationMember</Declaration>
                </Match>
            </Matches>
            <Description>Do not name enumerations reserved.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>NotMatchesRegex</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
            <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Event</Declaration>
                </Match>
            </Matches>
            <Description>Event should not have Before or After prefix.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
                <string>Before</string>
                <string>After</string>
            </MustNotHavePrefixes>
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                </Match>
            </Matches>
            <Description>Flags enums should have plural names</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>s</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>true</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                </Match>
            </Matches>
            <NotMatches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                </Match>
            </NotMatches>
            <Description>Enums that are not flags should not have plural names</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes>
                <string>s</string>
            </MustNotHaveSuffixes>
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Attribute</InheritedFrom>
                </Match>
            </Matches>
            <Description>Attribute should end with Attribute.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Attribute</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.EventArgs</InheritedFrom>
                </Match>
            </Matches>
            <Description>EventArgs should end with EventArgs.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>EventArgs</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Exception</InheritedFrom>
                </Match>
            </Matches>
            <Description>Exceptions should end with Exception.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Exception</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Stack</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                    <MarkedWithAttribute />
                </Match>
            </Matches>
            <NotMatches />
            <Description>Stack should end with Collection or Stack.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Collection</string>
                <string>Stack</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                </Match>
            </Matches>
            <NotMatches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Stack</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Queue</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                    <MarkedWithAttribute />
                </Match>
            </NotMatches>
            <Description>Collections should end with Collection.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Collection</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                </Match>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                </Match>
            </Matches>
            <Description>Dictionary should end with Dictionary.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Dictionary</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Queue</InheritedFrom>
                </Match>
            </Matches>
            <Description>Queue should end with Collection or Queue.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
                <string>Collection</string>
                <string>Queue</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
        </NamingConventionRule>
        <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
                <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Interface</Declaration>
                </Match>
            </Matches>
            <Description>Interfaces should be in Pascal and start with I.</Description>
            <MustHavePrefixes>
                <string>I</string>
            </MustHavePrefixes>
            <MustNotHavePrefixes />
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
        </NamingConventionRule>
    </Rules>
    <Exclusions />
</NamingConventionSettings>